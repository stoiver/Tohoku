"""
Script for running simulation of 2011 Tohoku tsunami

Source data such as elevation and boundary data is assumed to be available in
directories specified by project.py
The output sww file is stored in directory named after the scenario, i.e
slide or fixed_wave.

The scenario is defined by a triangular mesh created from project.polygon,
the elevation data and a tsunami wave generated by a submarine mass failure.

Stephen Roberts  2012-present
"""

#------------------------------------------------------------------------------
# Import necessary modules
#------------------------------------------------------------------------------
# Standard modules


import os
from numpy import allclose
import time
import sys
# Related major packages
import anuga


from anuga import distribute, myid, numprocs, finalize, barrier

import project


tide = -0.45


#===============================================================================
# Sequential Section
# Only create sequential domain on processor 0
#===============================================================================
if myid == 0:
    #------------------------------------------------------------------------------
    # Create the triangular mesh and domain based on
    # overall clipping polygon with a tagged
    # boundary and interior regions as defined in project.py
    #------------------------------------------------------------------------------
    print ('project name: ', project.name_stem)
    domain = anuga.create_domain_from_regions(project.bounding_polygon,
                                        boundary_tags={'bottom': [0],
                                                       'ocean_east': [1],
                                                       'top': [2],
                                                       'onshore': [3]},
                                        maximum_triangle_area=project.res_whole,
                                        mesh_filename=project.meshname,
                                        interior_regions=project.interior_regions,
                                        use_cache=True,
                                        verbose=True)

    # Print some stats about mesh and domain
    print ('Number of triangles = ', len(domain))
    print ('The extent is ', domain.get_extent())
    print (domain.statistics())


    #------------------------------------------------------------------------------
    # Setup parameters of computational domain
    #------------------------------------------------------------------------------
    domain.set_name('Tohoku_' + project.scenario) # Name of sww file
    domain.set_datadir(project.output_run)        # Store sww output here
    domain.set_minimum_storable_height(0.01)      # Store only depth > 1cm
    #domain.set_flow_algorithm('DE0')

    #------------------------------------------------------------------------------
    # Setup initial conditions
    #------------------------------------------------------------------------------
    domain.set_quantity('elevation',
                        filename=project.name_stem + '.pts',
                        use_cache=True,
                        verbose=project.verbose,
                        alpha=0.1)

    domain.set_quantity('stage', tide)


    domain.add_quantity('stage',
                        filename=project.source_file,
                        use_cache=True,
                        verbose=project.verbose)

    domain.set_quantity('friction', 0.0)
else:
    domain = None

#-------------------------------------------------------------------------------
# Distribute domain
#-------------------------------------------------------------------------------
domain = distribute(domain,verbose=project.verbose)


#===============================================================================
# Parallel Section
#===============================================================================

domain.set_quantities_to_be_stored({'stage' : 2,
                                    'xmomentum' : 2,
                                    'ymomentum' : 2,
                                    'elevation' : 2})
domain.set_quantities_to_be_monitored(['stage', 'xmomentum', 'ymomentum'])



if myid ==0: print ('running project:', project.scenario)
#------------------------------------------------------------------------------
# Setup boundary conditions
#------------------------------------------------------------------------------
#print 'Available boundary tags', domain.get_boundary_tags()

def tide_fun(t):
    return tide

Bd = anuga.Dirichlet_boundary([tide, 0, 0]) # Mean water level
#Bs = anuga.Transmissive_stage_zero_momentum_boundary(domain) # Neutral boundary
Bs = anuga.Transmissive_n_momentum_zero_t_momentum_set_stage_boundary(domain,tide_fun)
Bf = anuga.Flather_external_stage_zero_velocity_boundary(domain,tide_fun)
Bt = anuga.Transmissive_boundary(domain) # Neutral boundary
Br = anuga.Reflective_boundary(domain)
# Boundary conditions for slide scenario
domain.set_boundary({'ocean_east': Bf,
                         'bottom': Bf,
                         'onshore': Br,
                         'top': Bf})
if myid==0 : print (domain.boundary_statistics(tags=['ocean_east','onshore']))
#------------------------------------------------------------------------------
# Evolve system through time
#------------------------------------------------------------------------------
# initial time

t0 = time.time()
min = 60
hour = 3600

# source file

# Initial run without any event
for t in domain.evolve(yieldstep=5*min, finaltime=4*hour):

    domain.write_time()
        #print domain.boundary_statistics(tags=['ocean_east','onshore'])

    # Add coseismic displacement to water surface and elevaton
    #if allclose(t, 60):
    #domain.add_quantity('stage', filename=project.source_file)
    #domain.add_quantity('elevation', filename=project.source_file)


domain.sww_merge(delete_old=True)

print ('That took %.2f seconds' %(time.time()-t0))


anuga.finalize()
